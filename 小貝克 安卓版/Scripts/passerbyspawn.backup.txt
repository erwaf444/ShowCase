using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
 
[System.Serializable]
public class MenuItem 
{
    public int id; // 或者使用 string 类型，如果你希望 ID 更具可读性
    //蛋糕id從0開始
    //甜甜圈id從100開始
    //麵包id從200開始
    //杯子蛋糕id從300開始
    //造型面包id從400開始
    public Sprite image; // 对应的图片
    public int price;
}

public class PasserbySpawn : MonoBehaviour
{
    public GameObject passerbyPrefab;
    public Transform spawnPointA;
    public Transform spawnPointB;
    public int numberOfPasserbys;
    public float stopChance;
    
    public GameObject pointD;
    public GameObject pointE;
    public GameObject pointF;
    // public Sprite[] menuOrder;
    public MenuItem[] menuOrder;
    private bool allowPasserbyToStop = true; // 標誌是否允許新路人停下

    private List<Passerby> activePasserbys = new List<Passerby>();
    private Passerby currentStoppedPasserby;


    void Start()
    {
        pointD = GameObject.Find("PointD");
        pointE = GameObject.Find("PointE");
        pointF = GameObject.Find("PointF");

        // 自动设置每个 MenuItem 的 ID
        // for (int i = 0; i < menuOrder.Length; i++)
        // {
        //     menuOrder[i].id = i; // 将 ID 设置为当前索引
        // }

        Debug.Log("Spawn coroutine started"); 
        StartCoroutine(SpawnPasserbys());
    }

    IEnumerator SpawnPasserbys()
    {
        for (int i = 0; i < numberOfPasserbys; i++)
        {
            // Instantiate the prefab
            GameObject passerbyObj = Instantiate(passerbyPrefab, spawnPointA.position, Quaternion.identity);
            
            Passerby passerbyScript = passerbyObj.GetComponent<Passerby>();
            if (passerbyScript != null)
            {
                passerbyScript.pointA = spawnPointA.gameObject;
                passerbyScript.pointB = spawnPointB.gameObject;
            }

            activePasserbys.Add(passerbyScript);

            float randomValue  = Random.Range(0f, 1f);
            if (allowPasserbyToStop && randomValue  < stopChance)
            {
                Debug.Log(randomValue);
                // 随机停止
                StopPasserby(passerbyScript);
            }
            

            float randomInterval = Random.Range(2f, 5f);
            yield return new WaitForSeconds(randomInterval);
        }
    }

    private void StopPasserby(Passerby passerby)
    {
        currentStoppedPasserby = passerby;
        MenuItem selectedImage = menuOrder[Random.Range(0, menuOrder.Length)];
        Transform[] stopPoints = { pointD.transform, pointE.transform, pointF.transform };
        Transform selectedStopPoint = stopPoints[Random.Range(0, stopPoints.Length)];
        passerby.SetStopPoint(selectedStopPoint);
        passerby.ShowImage(selectedImage.image, selectedImage.id, selectedImage.price);
        
        Rigidbody2D rb = passerby.GetComponent<Rigidbody2D>();
        if (rb != null)
        {
            rb.velocity = Vector2.zero;
        }
        
        allowPasserbyToStop = false;
        StartCoroutine(HandlePasserbyStop(passerby));
    }

    IEnumerator HandlePasserbyStop(Passerby passerby)
    {
        // 停止的持续时间
        float stopDuration = 30f;
        yield return new WaitForSeconds(stopDuration);

        if (currentStoppedPasserby == passerby)
        {
            ResumePasserby(passerby);
        }
    }

    public void ResumePasserby(Passerby passerby)
    {
        passerby.shouldStop = false;
        Rigidbody2D rb = passerby.GetComponent<Rigidbody2D>();
        if (rb != null)
        {
            rb.velocity = new Vector2(passerby.speed, 0f);
        }
        passerby.HideImage();
        
        currentStoppedPasserby = null;
        allowPasserbyToStop = true;
    }

    public Passerby GetCurrentStoppedPasserby()
    {
        return currentStoppedPasserby;
    }
}
